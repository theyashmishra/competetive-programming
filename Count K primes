// C++ program to find prime factorization of a 
// number n in O(Log n) time with precomputation 
// allowed. 
#include "bits/stdc++.h" 
using namespace std; 
typedef long long int ll;
#define MAXN 100001 

// stores smallest prime factor for every number 
ll spf[MAXN]; 

// Calculating SPF (Smallest Prime Factor) for every 
// number till MAXN. 
// Time Complexity : O(nloglogn) 
void sieve() 
{ 
	spf[1] = 1; 
	for (ll  i=2; i<MAXN; i++) 

		// marking smallest prime factor for every 
		// number to be itself. 
		spf[i] = i; 

	// separately marking spf for every even 
	// number as 2 
	for (ll  i=4; i<MAXN; i+=2) 
		spf[i] = 2; 

	for (ll  i=3; i*i<MAXN; i++) 
	{ 
		// checking if i is prime 
		if (spf[i] == i) 
		{ 
			// marking SPF for all numbers divisible by i 
			for (ll  j=i*i; j<MAXN; j+=i) 

				// marking spf[j] if it is not 
				// previously marked 
				if (spf[j]==j) 
					spf[j] = i; 
		} 
	} 
} 

// A O(log n) function returning primefactorization 
// by dividing by smallest prime factor at every step 
set<ll > getFactorization(ll  x) 
{ 
	set<ll > ret; 
	while (x != 1) 
	{ 
		ret.insert(spf[x]); 
		x = x / spf[x]; 
	} 
	return ret; 
} 

// driver program for above function 
int main(int argc, char const *argv[]) 
{ 
	// precalculating Smallest Prime Factor 
	sieve(); 
ll  t,a,b,k,c,i;
cin>>t;
while(t--){c=0;
cin>>a>>b>>k;
	for(i=a;i<=b;i++){
	set <ll > p = getFactorization(i); 
if(p.size()==k){
    c++;
}
}
	
	cout<<c<<endl;
}
	return 0; 
} 
